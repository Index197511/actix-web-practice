{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6","program":"/home/index197511/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","actix_rt","/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=e3ced3c01501758f","-C","extra-filename=-e3ced3c01501758f","--out-dir","/home/index197511/actix-web-practice/target/rls/debug/deps","-L","dependency=/home/index197511/actix-web-practice/target/rls/debug/deps","--extern","actix_threadpool=/home/index197511/actix-web-practice/target/rls/debug/deps/libactix_threadpool-609cfd4fa618610c.rmeta","--extern","copyless=/home/index197511/actix-web-practice/target/rls/debug/deps/libcopyless-040df69205f48685.rmeta","--extern","futures=/home/index197511/actix-web-practice/target/rls/debug/deps/libfutures-f1465c4a52b5615e.rmeta","--extern","tokio_current_thread=/home/index197511/actix-web-practice/target/rls/debug/deps/libtokio_current_thread-d20c3f909d68f5de.rmeta","--extern","tokio_executor=/home/index197511/actix-web-practice/target/rls/debug/deps/libtokio_executor-67b429679912d148.rmeta","--extern","tokio_reactor=/home/index197511/actix-web-practice/target/rls/debug/deps/libtokio_reactor-ab33bd2f34f096f3.rmeta","--extern","tokio_timer=/home/index197511/actix-web-practice/target/rls/debug/deps/libtokio_timer-425cc18834afc993.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/index197511/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/index197511/actix-web-practice/target/rls/debug/deps/libactix_rt-e3ced3c01501758f.rmeta"},"prelude":{"crate_id":{"name":"actix_rt","disambiguator":[16375299425605111909,6420321574431681918]},"crate_root":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src","external_crates":[{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3103785602532093942,17390144583497853382]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[3916277366462804126,4478459115610208312]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1713477286964588179,15844277248566971785]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13012427356130990406,14608520140697239788]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6447241057134257354,1413806012037948949]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4393201617425879462,3310437476178738552]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7079830315103279809,4606718705203350064]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5206394019873543407,10667910451093706265]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9386824491997906070,17212049238264027415]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16927035401729681780,12437521449932722366]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[11652895559356135055,9563436424588767888]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[16517787911197841201,14116661015581648310]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[5448928475534237502,8623809376237663283]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[9897490559936190142,12325087316115451923]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","num":15,"id":{"name":"futures","disambiguator":[4674354732864274231,486310031280575567]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","num":16,"id":{"name":"tokio_current_thread","disambiguator":[7470701383090462508,17941625833286310807]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/runtime.rs","num":17,"id":{"name":"tokio_executor","disambiguator":[5602467214414018389,17823447453893622683]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","num":18,"id":{"name":"crossbeam_utils","disambiguator":[4783005765374139022,7262580745920274374]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","num":19,"id":{"name":"cfg_if","disambiguator":[13583319368851408629,4810563495689936661]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","num":20,"id":{"name":"lazy_static","disambiguator":[6740770218290746260,4056959873076346318]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","num":21,"id":{"name":"copyless","disambiguator":[390993315628510216,655727097153430820]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":22,"id":{"name":"tokio_reactor","disambiguator":[9721460350046444947,2552968996019118265]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":23,"id":{"name":"log","disambiguator":[3292208777694091655,6838420748907569633]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":24,"id":{"name":"mio","disambiguator":[11877603198610332156,7768157841774701048]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":25,"id":{"name":"net2","disambiguator":[7648058072537947976,4811609485394654031]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":26,"id":{"name":"libc","disambiguator":[16951308386329787197,9238021607635720415]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":27,"id":{"name":"iovec","disambiguator":[10311985176323717883,9739965849064247143]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":28,"id":{"name":"slab","disambiguator":[10638137633684842232,12136029273531708476]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":29,"id":{"name":"num_cpus","disambiguator":[5920237541360452830,8472699482888981766]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":30,"id":{"name":"parking_lot","disambiguator":[15042598404653163127,12761783715166607095]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":31,"id":{"name":"lock_api","disambiguator":[14151289864963157694,13443619908841207667]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":32,"id":{"name":"scopeguard","disambiguator":[10253496514066519894,14603779108236230003]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":33,"id":{"name":"parking_lot_core","disambiguator":[5766351579817518799,18229513737377877718]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":34,"id":{"name":"smallvec","disambiguator":[4837111284310157246,13020205197166008934]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":35,"id":{"name":"maybe_uninit","disambiguator":[6944596182463047552,7810656862658772866]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":36,"id":{"name":"tokio_io","disambiguator":[8457410867201238171,16825736796274767732]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":37,"id":{"name":"bytes","disambiguator":[7806756736940257899,17359123478827918859]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":38,"id":{"name":"byteorder","disambiguator":[10872931579835539693,12789071159449939682]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":39,"id":{"name":"tokio_sync","disambiguator":[3866560052614577893,1995011031619807291]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":40,"id":{"name":"fnv","disambiguator":[9529978141576567288,16884345762956252490]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","num":41,"id":{"name":"tokio_timer","disambiguator":[15678439475948065393,9621528609992956122]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":42,"id":{"name":"actix_threadpool","disambiguator":[13202278267706645329,16720825553192936329]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":43,"id":{"name":"derive_more","disambiguator":[17883433200325481530,15710599127571251506]}},{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","num":44,"id":{"name":"threadpool","disambiguator":[7464430270792091594,10088452676542333074]}}],"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","byte_start":0,"byte_end":631,"line_start":1,"line_end":30,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":305},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","byte_start":149,"byte_end":156,"line_start":8,"line_end":8,"column_start":24,"column_end":31},"alias_span":null,"name":"Arbiter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":159},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","byte_start":182,"byte_end":189,"line_start":9,"line_end":9,"column_start":25,"column_end":32},"alias_span":null,"name":"Builder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":334},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","byte_start":191,"byte_end":203,"line_start":9,"line_end":9,"column_start":34,"column_end":46},"alias_span":null,"name":"SystemRunner","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":340},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","byte_start":229,"byte_end":236,"line_start":10,"line_end":10,"column_start":24,"column_end":31},"alias_span":null,"name":"Runtime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":351},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","byte_start":260,"byte_end":266,"line_start":11,"line_end":11,"column_start":23,"column_end":29},"alias_span":null,"name":"System","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":42,"index":0},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","byte_start":292,"byte_end":308,"line_start":14,"line_end":14,"column_start":9,"column_end":25},"alias_span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","byte_start":312,"byte_end":320,"line_start":14,"line_end":14,"column_start":29,"column_end":37},"name":"blocking","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","byte_start":0,"byte_end":631,"line_start":1,"line_end":30,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":137},{"krate":0,"index":194},{"krate":0,"index":238},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287}],"decl_id":null,"docs":" A runtime implementation that runs everything on the current thread.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":305},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":2264,"byte_end":2271,"line_start":46,"line_end":46,"column_start":12,"column_end":19},"name":"Arbiter","qualname":"::arbiter::Arbiter","value":"Arbiter {  }","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":307}],"decl_id":null,"docs":" Arbiters provide an asynchronous execution environment for actors, functions\n and futures. When an Arbiter is created, they spawn a new OS thread, and\n host an event loop. Some Arbiter functions execute on the current thread.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":3086,"byte_end":3093,"line_start":78,"line_end":78,"column_start":12,"column_end":19},"name":"current","qualname":"<Arbiter>::current","value":"fn () -> Arbiter","parent":null,"children":[],"decl_id":null,"docs":" Returns the current thread's arbiter's address. If no Arbiter is present, then this\n function will panic!\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":3338,"byte_end":3342,"line_start":86,"line_end":86,"column_start":12,"column_end":16},"name":"stop","qualname":"<Arbiter>::stop","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stop arbiter from continuing it's event loop.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":3549,"byte_end":3552,"line_start":92,"line_end":92,"column_start":12,"column_end":15},"name":"new","qualname":"<Arbiter>::new","value":"fn () -> Arbiter","parent":null,"children":[],"decl_id":null,"docs":" Spawn new thread and run event loop in spawned thread.\n Returns address of newly created arbiter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":5627,"byte_end":5632,"line_start":153,"line_end":153,"column_start":12,"column_end":17},"name":"spawn","qualname":"<Arbiter>::spawn","value":"fn <F> (future: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Spawn a future on the current thread. This does not create a new Arbiter\n or Arbiter address, it is simply a helper for spawning futures on the current\n thread.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":6167,"byte_end":6175,"line_start":169,"line_end":169,"column_start":12,"column_end":20},"name":"spawn_fn","qualname":"<Arbiter>::spawn_fn","value":"fn <F, R> (f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Executes a future on the current thread. This does not create a new Arbiter\n or Arbiter address, it is simply a helper for executing futures on the current\n thread.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":6415,"byte_end":6419,"line_start":178,"line_end":178,"column_start":12,"column_end":16},"name":"send","qualname":"<Arbiter>::send","value":"fn <F> (&self, future: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Send a future to the Arbiter's thread, and spawn it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":6763,"byte_end":6770,"line_start":189,"line_end":189,"column_start":12,"column_end":19},"name":"exec_fn","qualname":"<Arbiter>::exec_fn","value":"fn <F> (&self, f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Send a function to the Arbiter's thread, and execute it. Any result from the function\n is discarded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":7232,"byte_end":7236,"line_start":203,"line_end":203,"column_start":12,"column_end":16},"name":"exec","qualname":"<Arbiter>::exec","value":"fn <F, R> (&self, f: F) -> impl Future<Item = R, Error = Canceled>","parent":null,"children":[],"decl_id":null,"docs":" Send a function to the Arbiter's thread. This function will be executed asynchronously.\n A future is created, and when resolved will contain the result of the function sent\n to the Arbiters thread.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":7715,"byte_end":7723,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"set_item","qualname":"<Arbiter>::set_item","value":"fn <T> (item: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set item to arbiter storage\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":7907,"byte_end":7920,"line_start":225,"line_end":225,"column_start":12,"column_end":25},"name":"contains_item","qualname":"<Arbiter>::contains_item","value":"fn <T> () -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if arbiter storage contains item\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":8173,"byte_end":8181,"line_start":232,"line_end":232,"column_start":12,"column_end":20},"name":"get_item","qualname":"<Arbiter>::get_item","value":"fn <T, F, R> (mut f: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a type previously inserted on this arbiter's storage.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":8693,"byte_end":8705,"line_start":249,"line_end":249,"column_start":12,"column_end":24},"name":"get_mut_item","qualname":"<Arbiter>::get_mut_item","value":"fn <T, F, R> (mut f: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a type previously inserted on this arbiter's storage.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":9313,"byte_end":9317,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"join","qualname":"<Arbiter>::join","value":"fn (&mut self) -> thread::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Wait for the event loop to stop by joining the underlying thread (if have Some).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":159},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":13526,"byte_end":13533,"line_start":23,"line_end":23,"column_start":12,"column_end":19},"name":"Builder","qualname":"::builder::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162}],"decl_id":null,"docs":" Builder struct for a actix runtime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":14030,"byte_end":14034,"line_start":44,"line_end":44,"column_start":12,"column_end":16},"name":"name","qualname":"<Builder>::name","value":"fn <T> (mut self, name: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the name of the System.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":14268,"byte_end":14273,"line_start":52,"line_end":52,"column_start":12,"column_end":17},"name":"clock","qualname":"<Builder>::clock","value":"fn (mut self, clock: Clock) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the Clock instance that will be used by this System.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":14550,"byte_end":14563,"line_start":61,"line_end":61,"column_start":12,"column_end":25},"name":"stop_on_panic","qualname":"<Builder>::stop_on_panic","value":"fn (mut self, stop_on_panic: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the option 'stop_on_panic' which controls whether the System is stopped when an\n uncaught panic is thrown from a worker thread.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":14777,"byte_end":14782,"line_start":69,"line_end":69,"column_start":12,"column_end":17},"name":"build","qualname":"<Builder>::build","value":"fn (self) -> SystemRunner","parent":null,"children":[],"decl_id":null,"docs":" Create new System.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":15295,"byte_end":15298,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"run","qualname":"<Builder>::run","value":"fn <F> (self, f: F) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" This function will start tokio runtime and will finish once the\n `System::stop()` message get called.\n Function `f` get called within tokio runtime context.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":334},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":18766,"byte_end":18778,"line_start":192,"line_end":192,"column_start":12,"column_end":24},"name":"SystemRunner","qualname":"::builder::SystemRunner","value":"SystemRunner {  }","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337}],"decl_id":null,"docs":" Helper object that runs System's event loop\n","sig":null,"attributes":[{"value":"must_use = \"SystemRunner must be run\"","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":18697,"byte_end":18737,"line_start":190,"line_end":190,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":18991,"byte_end":18994,"line_start":201,"line_end":201,"column_start":12,"column_end":15},"name":"run","qualname":"<SystemRunner>::run","value":"fn (self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" This function will start event loop and will finish once the\n `System::stop()` function is called.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":19767,"byte_end":19775,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"block_on","qualname":"<SystemRunner>::block_on","value":"fn <F, I, E> (&mut self, fut: F) -> Result<I, E>","parent":null,"children":[],"decl_id":null,"docs":" Execute a future and wait for result.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":340},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/runtime.rs","byte_start":20702,"byte_end":20709,"line_start":20,"line_end":20,"column_start":12,"column_end":19},"name":"Runtime","qualname":"::runtime::Runtime","value":"Runtime {  }","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344}],"decl_id":null,"docs":" Single-threaded runtime provides a way to start reactor\n and executor on the current thread.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":347},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/runtime.rs","byte_start":20924,"byte_end":20932,"line_start":29,"line_end":29,"column_start":12,"column_end":20},"name":"RunError","qualname":"::runtime::RunError","value":"RunError {  }","parent":null,"children":[{"krate":0,"index":348}],"decl_id":null,"docs":" Error returned by the `run` function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/runtime.rs","byte_start":21439,"byte_end":21442,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<Runtime>::new","value":"fn () -> io::Result<Runtime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new runtime initialized with default configuration values.\n","sig":null,"attributes":[{"value":"allow(clippy::new_ret_no_self)","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/runtime.rs","byte_start":21317,"byte_end":21350,"line_start":49,"line_end":49,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/runtime.rs","byte_start":22655,"byte_end":22660,"line_start":98,"line_end":98,"column_start":12,"column_end":17},"name":"spawn","qualname":"<Runtime>::spawn","value":"fn <F> (&mut self, future: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Spawn a future onto the single-threaded Tokio runtime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/runtime.rs","byte_start":23701,"byte_end":23709,"line_start":122,"line_end":122,"column_start":12,"column_end":20},"name":"block_on","qualname":"<Runtime>::block_on","value":"fn <F> (&mut self, f: F) -> Result<F::Item, F::Error>","parent":null,"children":[],"decl_id":null,"docs":" Runs the provided future, blocking the current thread until the future\n completes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/runtime.rs","byte_start":24133,"byte_end":24136,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"run","qualname":"<Runtime>::run","value":"fn (&mut self) -> Result<(), RunError>","parent":null,"children":[],"decl_id":null,"docs":" Run the executor to completion, blocking the thread until **all**\n spawned futures have completed.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":351},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":26182,"byte_end":26188,"line_start":16,"line_end":16,"column_start":12,"column_end":18},"name":"System","qualname":"::system::System","value":"System {  }","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355}],"decl_id":null,"docs":" System is a runtime manager.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":27009,"byte_end":27016,"line_start":48,"line_end":48,"column_start":12,"column_end":19},"name":"builder","qualname":"<System>::builder","value":"fn () -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Build a new system with a customized tokio runtime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":27208,"byte_end":27211,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"new","qualname":"<System>::new","value":"fn <T> (name: T) -> SystemRunner","parent":null,"children":[],"decl_id":null,"docs":" Create new system.","sig":null,"attributes":[{"value":"allow(clippy::new_ret_no_self)","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":27066,"byte_end":27099,"line_start":52,"line_end":52,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":27488,"byte_end":27503,"line_start":64,"line_end":64,"column_start":12,"column_end":27},"name":"run_in_executor","qualname":"<System>::run_in_executor","value":"fn <T> (name: T, executor: Handle) -> impl Future<Item = (), Error = io::Error> + Send","parent":null,"children":[],"decl_id":null,"docs":" Create new system using provided CurrentThread Handle.","sig":null,"attributes":[{"value":"allow(clippy::new_ret_no_self)","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":27310,"byte_end":27343,"line_start":60,"line_end":60,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":27793,"byte_end":27800,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"name":"current","qualname":"<System>::current","value":"fn () -> System","parent":null,"children":[],"decl_id":null,"docs":" Get current running system.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":28178,"byte_end":28189,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"set_current","qualname":"<System>::set_current","value":"fn (sys: System) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set current running system.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":28350,"byte_end":28362,"line_start":96,"line_end":96,"column_start":12,"column_end":24},"name":"with_current","qualname":"<System>::with_current","value":"fn <F, R> (f: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Execute function with system reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":28617,"byte_end":28619,"line_start":107,"line_end":107,"column_start":12,"column_end":14},"name":"id","qualname":"<System>::id","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" System id\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":28696,"byte_end":28700,"line_start":112,"line_end":112,"column_start":12,"column_end":16},"name":"stop","qualname":"<System>::stop","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stop the system\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":28812,"byte_end":28826,"line_start":117,"line_end":117,"column_start":12,"column_end":26},"name":"stop_with_code","qualname":"<System>::stop_with_code","value":"fn (&self, code: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stop the system with a particular exit code.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":29180,"byte_end":29193,"line_start":127,"line_end":127,"column_start":12,"column_end":25},"name":"stop_on_panic","qualname":"<System>::stop_on_panic","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return status of 'stop_on_panic' option which controls whether the System is stopped when an\n uncaught panic is thrown from a worker thread.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":29279,"byte_end":29286,"line_start":132,"line_end":132,"column_start":12,"column_end":19},"name":"arbiter","qualname":"<System>::arbiter","value":"fn (&self) -> &Arbiter","parent":null,"children":[],"decl_id":null,"docs":" System arbiter\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":29527,"byte_end":29530,"line_start":139,"line_end":139,"column_start":12,"column_end":15},"name":"run","qualname":"<System>::run","value":"fn <F> (f: F) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" This function will start tokio runtime and will finish once the\n `System::stop()` message get called.\n Function `f` get called within tokio runtime context.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":287},"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/lib.rs","byte_start":452,"byte_end":457,"line_start":21,"line_end":21,"column_start":8,"column_end":13},"name":"spawn","qualname":"::spawn","value":"fn <F> (f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Spawns a future on the current arbiter.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":1649,"byte_end":1663,"line_start":32,"line_end":32,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":2388,"byte_end":2395,"line_start":51,"line_end":51,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":2501,"byte_end":2508,"line_start":57,"line_end":57,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":2572,"byte_end":2579,"line_start":63,"line_end":63,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":109},{"krate":0,"index":115},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":9631,"byte_end":9648,"line_start":283,"line_end":283,"column_start":15,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":10014,"byte_end":10031,"line_start":296,"line_end":296,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":11242,"byte_end":11255,"line_start":338,"line_end":338,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":11502,"byte_end":11515,"line_start":348,"line_end":348,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":12733,"byte_end":12734,"line_start":384,"line_end":384,"column_start":20,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":13794,"byte_end":13801,"line_start":34,"line_end":34,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":17660,"byte_end":17677,"line_start":159,"line_end":159,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":18851,"byte_end":18863,"line_start":198,"line_end":198,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/runtime.rs","byte_start":20997,"byte_end":21005,"line_start":33,"line_end":33,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/runtime.rs","byte_start":21131,"byte_end":21139,"line_start":39,"line_end":39,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/runtime.rs","byte_start":21303,"byte_end":21310,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":228},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":26387,"byte_end":26393,"line_start":27,"line_end":27,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":1649,"byte_end":1663,"line_start":32,"line_end":32,"column_start":21,"column_end":35},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":46},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":2388,"byte_end":2395,"line_start":51,"line_end":51,"column_start":16,"column_end":23},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":305},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":2501,"byte_end":2508,"line_start":57,"line_end":57,"column_start":18,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":305},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":2572,"byte_end":2579,"line_start":63,"line_end":63,"column_start":6,"column_end":13},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":9631,"byte_end":9648,"line_start":283,"line_end":283,"column_start":15,"column_end":32},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":117},"to":{"krate":2,"index":1623}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":10014,"byte_end":10031,"line_start":296,"line_end":296,"column_start":17,"column_end":34},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":117},"to":{"krate":15,"index":477}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":11242,"byte_end":11255,"line_start":338,"line_end":338,"column_start":6,"column_end":19},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":323},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":11502,"byte_end":11515,"line_start":348,"line_end":348,"column_start":17,"column_end":30},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":323},"to":{"krate":15,"index":477}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":12660,"byte_end":12664,"line_start":380,"line_end":380,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":1437},"to":{"krate":0,"index":132}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/arbiter.rs","byte_start":12733,"byte_end":12734,"line_start":384,"line_end":384,"column_start":20,"column_end":21},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":135},"to":{"krate":0,"index":132}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":13794,"byte_end":13801,"line_start":34,"line_end":34,"column_start":6,"column_end":13},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":159},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":17660,"byte_end":17677,"line_start":159,"line_end":159,"column_start":6,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/builder.rs","byte_start":18851,"byte_end":18863,"line_start":198,"line_end":198,"column_start":6,"column_end":18},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/runtime.rs","byte_start":20997,"byte_end":21005,"line_start":33,"line_end":33,"column_start":23,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":347},"to":{"krate":2,"index":6826}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/runtime.rs","byte_start":21131,"byte_end":21139,"line_start":39,"line_end":39,"column_start":16,"column_end":24},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":347},"to":{"krate":1,"index":1542}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/runtime.rs","byte_start":21303,"byte_end":21310,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/index197511/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-rt-0.2.6/src/system.rs","byte_start":26387,"byte_end":26393,"line_start":27,"line_end":27,"column_start":6,"column_end":12},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":351},"to":{"krate":4294967295,"index":4294967295}}]}